@model ScoreApp.Models.Scores
@using ScoreApp.Models;
@{
    ViewBag.Title = "List of scores";

    if (TempData["sortOrder"] != null)
    {
        if (TempData["sortOrder"].ToString() == "ASC")
        {
            TempData["sortOrder"] = "DESC";
        }
        else
        {
            TempData["sortOrder"] = "ASC";
        }
    }
    else
    {
        TempData["sortOrder"] = "ASC";
    }

    string sortOrder = TempData["sortOrder"].ToString();
}

<h2>Wall of fame</h2>
<hr />

@Html.AntiForgeryToken()

<div id="addScore" style="display: none;">
    <span class="title">Add New Score</span>
    <div class="addContent">
        <span class="hint">Write the name of the player and her/his score<br />and press "Save". Hit ESC to close this dialog.</span>
        <span class="labeli">Player:</span><input class="inputField" type="text" id="txtPlayer" /><br />
        <span class="labeli">Score:</span><input class="inputField" type="text" id="txtScore" />
        <button id="btnSave" class="btnSave" onclick="saveScore();">Save</button>
    </div>
</div>
<div>
    <div id="overlay" class="overlay" style="display: none;"></div>
    <table id="scoreTable" class="scoreTable">
        <thead>
            <tr class="scoreHead">
                <th onclick='sortScores("@sortOrder");'>Score ▼</th>
                <th>Player</th>
            </tr>
        </thead>
        @foreach (Score item in Model.scores)
        {
            <tr class="scoreRow">
                <td class="col0">
                    @item.score
                </td>
                <td>
                    @item.playerName
                </td>
            </tr>
        }
    </table>
</div>
<div class="scoreDiv">Number of scores: @Model.scores.Count()</div>
<div class="buttonDiv"><button id="btnNewScore" type="button" onclick='toggleDiv("addScore", true);'>Add new score</button></div>


<script type="text/javascript">



    function toggleDiv(div, visible) {

        //-- Empty textboxes
        $("#txtPlayer").val("");
        $("#txtScore").val("");

        //-- Show / hide input dialog box
        var obj = document.getElementById(div);
        var style = "none";
        if (visible) {
            style = "block";
        }
        obj.style.display = style;

        //-- Show / hide semi-transparent overlay
        var ol = document.getElementById("overlay");
        ol.style.display = style;

    }


    function saveScore() {
        var sUrl = "./addScore";

        var playerName = $("#txtPlayer").val();
        var score = $("#txtScore").val();

        if (score < 0) {
            toggleDiv("addScore", false);
            swal({
                title: "Error",
                text: "Score can't be a negative number!",
                type: "error",
                confirmButtonText: "Okay!"
            });
            return;
        }
            

        //-- Fire away ajax-request
        $.ajax({
            method: "POST",
            url: sUrl,
            beforeSend: function (xhr) {
                xhr.setRequestHeader("XSRF-TOKEN",
                    $('input:hidden[name="__RequestVerificationToken"]').val());
            },
            data: {
                player: playerName,
                score: score
            },
            error: function () {
                //-- Hide input dialog and show error messagebox
                toggleDiv("addScore", false);
                swal({
                    title: "Error",
                    text: "Error saving score! Check the values before saving!",
                    type: "error",
                    confirmButtonText: "Okay!"
                });
            }
        })
            .done(function () {
                //-- Saving score success, show messagebox
                toggleDiv("addScore", false);
                swal({
                    title: 'Score saved!',
                    text: 'New score was saved successfully',
                    type: 'success',
                    confirmButtonText: 'Allright!'
                })
                    .then((result) => {
                        if (result.value) {
                            document.location.href = "./List";
                        }
                    });
            });
    }



    function sortScores(sortOrder) {

        var sUrl = "./List";
        var tr = "";
        var t = "";
        var indicator = "";

        $.ajax({
            type: "POST",
            url: sUrl,
            dataType: "json",
            beforeSend: function (xhr) {
                xhr.setRequestHeader("XSRF-TOKEN",
                    $('input:hidden[name="__RequestVerificationToken"]').val());
            },
            data: {
                order: sortOrder
            },
            success: function (json) {
                $('#scoreTable').empty();

                if (sortOrder === "ASC") {
                    nextSortOrder = "DESC";
                    indicator = "▼";
                }
                else {
                    nextSortOrder = "ASC";
                    indicator = "▲";
                }

                t = $('<thead>');
                t.append('<tr class="scoreHead"><th style="width: 130px;"><a style="color:white !important" onclick="sortScores(\'' + nextSortOrder + '\');">Score ' + indicator + '</a></th><th>Player</th></tr>');
                t.append('</thead>');

                $('#scoreTable').append(t);

                for (var i = 0; i < json.scores.length; i++) {
                    tr = $("<tr  class='scoreRow'>");
                    tr.append("<td class='col0'>" + json.scores[i].score + "</td>");
                    tr.append("<td>" + json.scores[i].playerName + "</td>");
                    tr.append("</tr>");

                    $('#scoreTable').append("<tbody>");
                    $('#scoreTable').append(tr);
                    $('#scoreTable').append("</tbody>");
                }
            }
        });
    }
</script>